package wit.vega2.lic.gen;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.swing.AbstractButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import org.apache.commons.io.FileUtils;
import wit.guardant.ticket.GrdData3;
import wit.guardant.ticket.GrdDongle;

public class MainFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    private static MainFrame mainFrame;
    private static final String VENDOR = "ООО \"Вирасофт\"";
    private static final String PUB_ECC_KEY = "579BCBFC51C14A1D9AF483C59EE496D24BCB3439D0B9EA1962CB9B1C4C4FD6BD77CCDEFA4FD40C6B";
    private static final int RD_KEY = 1558217874;


    public static void showMsg(Exception ex) {
        JOptionPane.showMessageDialog(mainFrame, ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
    }

    public static void showErrMsg(String s) {
        if (s != null && !s.isEmpty()) {
            JOptionPane.showMessageDialog(mainFrame, s, "Ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void showInfoMsg(String s) {
        if (s != null && !s.isEmpty()) {
            JOptionPane.showMessageDialog(mainFrame, s, "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        mainFrame = this;
        initComponents();
        defValues();
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (GrdDongle.isDllLoaded()) {
                    try {
                        GrdDongle.deinitApi();
                    } catch (Exception ex) {
                    }
                }
            }
        });

        enableButtonEncode();
        
        jTextFieldLicKey.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                enableButtonEncode();
            }
            public void removeUpdate(DocumentEvent e) {
                enableButtonEncode();
            }
            public void insertUpdate(DocumentEvent e) {
                enableButtonEncode();
            }
          });
    }
    
    public void enableButtonEncode() {
        if (jTextFieldLicKey.getText().trim().length() > 0) {
            jButtonEncode.setEnabled(true);
            jMenuItemOpenLic.setEnabled(true);
        } else {
            jButtonEncode.setEnabled(false);
            jMenuItemOpenLic.setEnabled(false);
        }
    }
    
    private void defValues() {
        jTextFieldVendor.setText(VENDOR);
        jTextFieldProduct.setText("Vega2");
        jTextFieldDate.setText(sdf.format(new Date()));
        GrdDongle.isDllLoaded();
        if(jCheckBoxUseDongle.isSelected()) {
            byte[] bb = ByteBuffer.allocate(4).putInt(RD_KEY).array();
            jTextFieldLicKey.setText(GrdDongle.byte2hex(bb, 0));
        }
        jButtonCreateSerialActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanelIn = new javax.swing.JPanel();
        jTextFieldVendor = new javax.swing.JTextField();
        jLabelCustomer = new javax.swing.JLabel();
        jLabelProduct = new javax.swing.JLabel();
        jLabelVersion = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jLabelSerial = new javax.swing.JLabel();
        jLabelANPRLic = new javax.swing.JLabel();
        jTextFieldCustomer = new javax.swing.JTextField();
        jTextFieldProduct = new javax.swing.JTextField();
        jTextFieldVersion = new javax.swing.JTextField();
        jTextFieldDate = new javax.swing.JTextField();
        jTextFieldSerial = new javax.swing.JTextField();
        jButtonCreateSerial = new javax.swing.JButton();
        jScrollPaneANPRLic = new javax.swing.JScrollPane();
        jTextAreaANPRLic = new javax.swing.JTextArea();
        jLabelVendor = new javax.swing.JLabel();
        jButtonDef = new javax.swing.JButton();
        jLabelCustomerFio = new javax.swing.JLabel();
        jTextFieldCustomerFio = new javax.swing.JTextField();
        jLabelCustomerPhone = new javax.swing.JLabel();
        jTextFieldCustomerPhone = new javax.swing.JTextField();
        jLabelCustomerEmail = new javax.swing.JLabel();
        jTextFieldCustomerEmail = new javax.swing.JTextField();
        jTextFieldLicKey = new javax.swing.JTextField();
        jLabelLicKey = new javax.swing.JLabel();
        jButtonCreateLicKey = new javax.swing.JButton();
        jButtonReadANPRLic = new javax.swing.JButton();
        jLabelLicPubKey = new javax.swing.JLabel();
        jTextFieldLicPubKey = new javax.swing.JTextField();
        jCheckBoxUseDongle = new javax.swing.JCheckBox();
        jScrollPaneLic = new javax.swing.JScrollPane();
        jTextAreaLic = new javax.swing.JTextArea();
        jLabelLic = new javax.swing.JLabel();
        jButtonEncode = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpenLic = new javax.swing.JMenuItem();
        jMenuItemSaveLic = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Генератор лицензии Vega2");

        jTextFieldVendor.setEditable(false);
        jTextFieldVendor.setEnabled(false);

        jLabelCustomer.setText("Клиент - организация");

        jLabelProduct.setText("Наименование продукта");

        jLabelVersion.setText("Версия");

        jLabelDate.setText("Дата выдачи лицензии");

        jLabelSerial.setText("Серийный номер");

        jLabelANPRLic.setText("Лицензия iANPR");

        jButtonCreateSerial.setText("Генерировать");
        jButtonCreateSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateSerialActionPerformed(evt);
            }
        });

        jTextAreaANPRLic.setEditable(false);
        jTextAreaANPRLic.setColumns(20);
        jTextAreaANPRLic.setRows(5);
        jScrollPaneANPRLic.setViewportView(jTextAreaANPRLic);

        jLabelVendor.setText("Продавец");

        jButtonDef.setText("По умолчанию");
        jButtonDef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDefActionPerformed(evt);
            }
        });

        jLabelCustomerFio.setText("Клиент - контактное лицо");

        jLabelCustomerPhone.setText("Клиент - телефон");

        jLabelCustomerEmail.setText("Клиент - email");

        jTextFieldLicKey.setEditable(false);

        jLabelLicKey.setText("Ключ лицензии");

        jButtonCreateLicKey.setText("Генерировать");
        jButtonCreateLicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateLicKeyActionPerformed(evt);
            }
        });

        jButtonReadANPRLic.setText("Прочитать");
        jButtonReadANPRLic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadANPRLicActionPerformed(evt);
            }
        });

        jLabelLicPubKey.setText("Публичный ключ подписи");

        jTextFieldLicPubKey.setEditable(false);

        jCheckBoxUseDongle.setText("Использовать Dongle");
        jCheckBoxUseDongle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseDongleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInLayout = new javax.swing.GroupLayout(jPanelIn);
        jPanelIn.setLayout(jPanelInLayout);
        jPanelInLayout.setHorizontalGroup(
            jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInLayout.createSequentialGroup()
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelInLayout.createSequentialGroup()
                                .addComponent(jButtonDef)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxUseDongle))
                            .addGroup(jPanelInLayout.createSequentialGroup()
                                .addComponent(jLabelLicPubKey)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldLicPubKey, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 39, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInLayout.createSequentialGroup()
                        .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelInLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelVendor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPaneANPRLic, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelInLayout.createSequentialGroup()
                                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelCustomer, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelCustomerFio, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelCustomerPhone, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelCustomerEmail, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelSerial, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelLicKey, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldCustomerEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                                    .addComponent(jTextFieldCustomerPhone)
                                    .addComponent(jTextFieldCustomerFio)
                                    .addComponent(jTextFieldCustomer)
                                    .addComponent(jButtonCreateSerial, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldSerial)
                                    .addComponent(jTextFieldLicKey)))
                            .addGroup(jPanelInLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonReadANPRLic)
                                    .addGroup(jPanelInLayout.createSequentialGroup()
                                        .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelDate)
                                            .addComponent(jLabelVersion)
                                            .addComponent(jLabelProduct))
                                        .addGap(4, 4, 4)
                                        .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextFieldVersion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                                            .addComponent(jTextFieldProduct, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldDate)))
                                    .addComponent(jButtonCreateLicKey)
                                    .addComponent(jLabelANPRLic))))
                        .addGap(20, 20, 20)))
                .addContainerGap())
        );
        jPanelInLayout.setVerticalGroup(
            jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldVendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVendor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCustomer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCustomerFio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCustomerFio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCustomerPhone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCustomerEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVersion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDate)
                    .addComponent(jTextFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSerial))
                .addGap(3, 3, 3)
                .addComponent(jButtonCreateSerial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLicKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLicKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCreateLicKey)
                .addGap(25, 25, 25)
                .addComponent(jLabelANPRLic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneANPRLic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReadANPRLic)
                    .addComponent(jButtonDef)
                    .addComponent(jCheckBoxUseDongle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLicPubKey)
                    .addComponent(jTextFieldLicPubKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jTextAreaLic.setEditable(false);
        jTextAreaLic.setColumns(20);
        jTextAreaLic.setLineWrap(true);
        jTextAreaLic.setRows(5);
        jScrollPaneLic.setViewportView(jTextAreaLic);

        jLabelLic.setText("Лицензия");

        jButtonEncode.setText("Создать лицензию");
        jButtonEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButtonEncode, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPaneLic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelLic))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabelLic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneLic, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEncode)
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addComponent(jPanelIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        jScrollPane1.setViewportView(jPanel2);

        jMenuFile.setText("Файл");

        jMenuItemOpenLic.setText("Загрузить лицензию");
        jMenuItemOpenLic.setEnabled(false);
        jMenuItemOpenLic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenLicActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpenLic);

        jMenuItemSaveLic.setText("Сохранить лицензию");
        jMenuItemSaveLic.setActionCommand("jMenuItemSaveLic");
        jMenuItemSaveLic.setEnabled(false);
        jMenuItemSaveLic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveLicActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveLic);

        jMenuBar1.add(jMenuFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encodeLic() {
        try {
            List<String> valueList = new ArrayList();
            valueList.add(jTextFieldVendor.getText());
            valueList.add(jTextFieldCustomer.getText());
            valueList.add(jTextFieldCustomerFio.getText());
            valueList.add(jTextFieldCustomerPhone.getText());
            valueList.add(jTextFieldCustomerEmail.getText());
            valueList.add(jTextFieldProduct.getText());
            valueList.add(jTextFieldVersion.getText());
            valueList.add(jTextFieldDate.getText());
            valueList.add(jTextFieldSerial.getText());
            valueList.add(jTextAreaANPRLic.getText());

            if(!jCheckBoxUseDongle.isSelected()) {
                Security sec = new Security(valueList);
                sec.encrypt(jTextFieldLicKey.getText());
                jTextAreaLic.setText(sec.getEncryptedText());
            } else {
                byte[] rdKeyByteArray = GrdDongle.hex2byte(jTextFieldLicKey.getText());
                GrdData3 grdData = new GrdData3(valueList, jTextFieldLicPubKey.getText(),
                        ByteBuffer.wrap(rdKeyByteArray).getInt());
                byte[] bb = grdData.serialize();
                String s = GrdDongle.byte2hex(bb, 32);
                jTextAreaLic.setText(s);
            }
            jMenuItemSaveLic.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(mainFrame, e.toString(), "Ошибка", JOptionPane.ERROR_MESSAGE);
            jTextFieldLicKey.setText("");
            jMenuItemSaveLic.setEnabled(false);
        }
    }

    private void clearTxt() {
        jTextFieldVendor.setText("");
        jTextFieldCustomer.setText("");
        jTextFieldCustomerFio.setText("");
        jTextFieldCustomerPhone.setText("");
        jTextFieldCustomerEmail.setText("");
        jTextFieldProduct.setText("");
        jTextFieldVersion.setText("");
        jTextFieldDate.setText("");
        jTextFieldSerial.setText("");
        jTextAreaANPRLic.setText("");
    }

    private void decodeLic() {
        clearTxt();
        try {
            List<String> valueList = new ArrayList();
            if(!jCheckBoxUseDongle.isSelected())
            {
                Security sec = new Security(jTextAreaLic.getText());
                sec.decrypt(jTextFieldLicKey.getText());
                valueList = sec.getDataList();
            } else {
                GrdData3 grdData = new GrdData3(jTextAreaLic.getText());
                valueList = grdData.getDataList();
                String publicEccKey = GrdDongle.byte2hex(grdData.getPublicEccKey(), 0);
                jTextFieldLicPubKey.setText(publicEccKey);
                byte[] bb = ByteBuffer.allocate(4).putInt(grdData.getRdKey()).array();
                jTextFieldLicKey.setText(GrdDongle.byte2hex(bb, 0));
            }
            if(valueList.size() > 0) {
                jTextFieldVendor.setText(valueList.get(0));
            }
            if(valueList.size() > 1) {
                jTextFieldCustomer.setText(valueList.get(1));
            }
            if(valueList.size() > 2) {
                jTextFieldCustomerFio.setText(valueList.get(2));
            }
            if(valueList.size() > 3) {
                jTextFieldCustomerPhone.setText(valueList.get(3));
            }
            if(valueList.size() > 4) {
                jTextFieldCustomerEmail.setText(valueList.get(4));
            }
            if(valueList.size() > 5) {
                jTextFieldProduct.setText(valueList.get(5));
            }
            if(valueList.size() > 6) {
                jTextFieldVersion.setText(valueList.get(6));
            }
            if(valueList.size() > 7) {
                jTextFieldDate.setText(valueList.get(7));
            }
            if(valueList.size() > 8) {
                jTextFieldSerial.setText(valueList.get(8));
            }
            if(valueList.size() > 9) {
                jTextAreaANPRLic.setText(valueList.get(9));
            }
        } catch (Exception e) {
            showMsg(e);
        }
    }
        
    private File getCurrentFile() {
        File result = null;
        String currentPath = MainFrame.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        int i = currentPath.indexOf("target/classes");
        if (i > 0) {
            result = new File(currentPath.substring(0, i));
        } else {
            i = currentPath.lastIndexOf("/");
            if (i > 0) {
                result = new File(currentPath.substring(0, i));
            }
        }
        return result;
    }
    
    private void jMenuItemOpenLicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenLicActionPerformed
        JFileChooser fd = new JFileChooser(getCurrentFile());
        fd.setDialogTitle("Загрузка лицензии");
        fd.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory()
                    || file.getName().toLowerCase().endsWith(".lic");
            }

            @Override
            public String getDescription() {
                return "*.lic";
            }
        });

        if (fd.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File fl = fd.getSelectedFile();
            if (fl != null) {
                FileInputStream fis = null;
                try {
                    fis = new FileInputStream(fl);
                    int l = fis.available();
                    byte[] bb = new byte[l];
                    if (fis.read(bb) == l) {
                        String s = new String(bb, "UTF-8");
                        jTextAreaLic.setText(s);
                        decodeLic();
                    } else {
                        showErrMsg("Ошибка загрузки файла");
                    }
                } catch (FileNotFoundException ex) {
                    showMsg(ex);
                } catch (IOException ex) {
                    showMsg(ex);
                }

                if (fis != null) {
                    try {
                        fis.close();
                    } catch (IOException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOpenLicActionPerformed

    private void jMenuItemSaveLicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveLicActionPerformed
        String serialTxt = jTextFieldSerial.getText();
        String dirName = jTextFieldCustomer.getText() + "_" + serialTxt;
        File dir = new File(dirName);
        if (dir.exists() && dir.isDirectory()) {
            try {
                FileUtils.deleteDirectory(dir);
            } catch (IOException ex) {
            }
        }
        dir.mkdir();

        FileOutputStream fosLic = null;
        try {
             fosLic = new FileOutputStream(new File(dir, "licence.lic"));
             fosLic.write(jTextAreaLic.getText().getBytes("UTF-8"));
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        } finally {
            if (fosLic != null) {
                try {
                    fosLic.close();
                } catch (IOException ex) {
                }
            }
        }

        StringBuilder sb = new StringBuilder();
        sb.append("vendor           : ").append(jTextFieldVendor.getText()).append("\r\n");
        sb.append("customer         : ").append(jTextFieldCustomer.getText()).append("\r\n");
        sb.append("customer - fio   : ").append(jTextFieldCustomerFio.getText()).append("\r\n");
        sb.append("customer - phone : ").append(jTextFieldCustomerPhone.getText()).append("\r\n");
        sb.append("customer - email : ").append(jTextFieldCustomerEmail.getText()).append("\r\n");
        sb.append("product          : ").append(jTextFieldProduct.getText()).append("\r\n");
        sb.append("version          : ").append(jTextFieldVersion.getText()).append("\r\n");
        sb.append("date             : ").append(jTextFieldDate.getText()).append("\r\n");
        sb.append("serial           : ").append(jTextFieldSerial.getText()).append("\r\n");
        sb.append("ANPR Lic         : ").append(jTextAreaANPRLic.getText()).append("\r\n");

        FileOutputStream fosTxt = null;
        try {
            fosTxt = new FileOutputStream(new File(dir, "info.txt"));
            fosTxt.write(sb.toString().getBytes());
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        } finally {
            if (fosTxt != null) {
                try {
                    fosTxt.close();
                } catch (IOException ex) {
                }
            }
        }
    }//GEN-LAST:event_jMenuItemSaveLicActionPerformed

    private void jButtonEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncodeActionPerformed
        encodeLic();
    }//GEN-LAST:event_jButtonEncodeActionPerformed

    private void jCheckBoxUseDongleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseDongleActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        if(abstractButton.getModel().isSelected()) {
            jLabelLicKey.setText("Ключ чтения/активации");
            jButtonCreateLicKey.setEnabled(false);
            byte[] bb = ByteBuffer.allocate(4).putInt(RD_KEY).array();
            jTextFieldLicKey.setText(GrdDongle.byte2hex(bb, 0));
            jTextFieldLicPubKey.setText(PUB_ECC_KEY);

        } else {
            jLabelLicKey.setText("Ключ лицензии");
            jButtonCreateLicKey.setEnabled(true);
            jTextFieldLicKey.setText("");
            jTextFieldLicPubKey.setText("");
        }
    }//GEN-LAST:event_jCheckBoxUseDongleActionPerformed

    private void jButtonReadANPRLicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadANPRLicActionPerformed
        JFileChooser fd = new JFileChooser(getCurrentFile());
        fd.setDialogTitle("Загрузка ключа iANPR");
        fd.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory()
                || file.getName().toLowerCase().endsWith(".key");
            }

            @Override
            public String getDescription() {
                return "*.key";
            }
        });

        if (fd.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File fl = fd.getSelectedFile();
            if (fl != null) {
                FileInputStream fis = null;
                try {
                    fis = new FileInputStream(fl);
                    int l = fis.available();
                    byte[] bb = new byte[l];
                    if (fis.read(bb) == l) {
                        String s = new String(bb, "UTF-8");
                        jTextAreaANPRLic.setText(s);
                    } else {
                        showErrMsg("Ошибка загрузки файла");
                    }
                } catch (FileNotFoundException ex) {
                    showMsg(ex);
                } catch (IOException ex) {
                    showMsg(ex);
                }

                if (fis != null) {
                    try {
                        fis.close();
                    } catch (IOException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonReadANPRLicActionPerformed

    private void jButtonCreateLicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateLicKeyActionPerformed
        JFileChooser fd = new JFileChooser(getCurrentFile());
        fd.setDialogTitle("Загрузка иеформации о системе");
        fd.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory()
                || file.getName().toLowerCase().endsWith(".txt");
            }

            @Override
            public String getDescription() {
                return "*.txt";
            }
        });

        if (fd.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File fl = fd.getSelectedFile();
            if (fl != null) {
                FileInputStream fis = null;
                try {
                    fis = new FileInputStream(fl);
                    int l = fis.available();
                    byte[] bb = new byte[l];
                    if (fis.read(bb) == l) {
                        String s = new String(bb, "UTF-8");
                        jTextFieldLicKey.setText(Security.sha256(s).toUpperCase());
                    } else {
                        showErrMsg("Ошибка загрузки файла");
                    }
                } catch (FileNotFoundException ex) {
                    showMsg(ex);
                } catch (IOException ex) {
                    showMsg(ex);
                }

                if (fis != null) {
                    try {
                        fis.close();
                    } catch (IOException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreateLicKeyActionPerformed

    private void jButtonDefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDefActionPerformed
        defValues();
    }//GEN-LAST:event_jButtonDefActionPerformed

    private void jButtonCreateSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateSerialActionPerformed
        UUID ud = UUID.randomUUID();
        jTextFieldSerial.setText(ud.toString().toUpperCase());
    }//GEN-LAST:event_jButtonCreateSerialActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreateLicKey;
    private javax.swing.JButton jButtonCreateSerial;
    private javax.swing.JButton jButtonDef;
    private javax.swing.JButton jButtonEncode;
    private javax.swing.JButton jButtonReadANPRLic;
    private javax.swing.JCheckBox jCheckBoxUseDongle;
    private javax.swing.JLabel jLabelANPRLic;
    private javax.swing.JLabel jLabelCustomer;
    private javax.swing.JLabel jLabelCustomerEmail;
    private javax.swing.JLabel jLabelCustomerFio;
    private javax.swing.JLabel jLabelCustomerPhone;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelLic;
    private javax.swing.JLabel jLabelLicKey;
    private javax.swing.JLabel jLabelLicPubKey;
    private javax.swing.JLabel jLabelProduct;
    private javax.swing.JLabel jLabelSerial;
    private javax.swing.JLabel jLabelVendor;
    private javax.swing.JLabel jLabelVersion;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemOpenLic;
    private javax.swing.JMenuItem jMenuItemSaveLic;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelIn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneANPRLic;
    private javax.swing.JScrollPane jScrollPaneLic;
    private javax.swing.JTextArea jTextAreaANPRLic;
    private javax.swing.JTextArea jTextAreaLic;
    private javax.swing.JTextField jTextFieldCustomer;
    private javax.swing.JTextField jTextFieldCustomerEmail;
    private javax.swing.JTextField jTextFieldCustomerFio;
    private javax.swing.JTextField jTextFieldCustomerPhone;
    private javax.swing.JTextField jTextFieldDate;
    private javax.swing.JTextField jTextFieldLicKey;
    private javax.swing.JTextField jTextFieldLicPubKey;
    private javax.swing.JTextField jTextFieldProduct;
    private javax.swing.JTextField jTextFieldSerial;
    private javax.swing.JTextField jTextFieldVendor;
    private javax.swing.JTextField jTextFieldVersion;
    // End of variables declaration//GEN-END:variables
}
